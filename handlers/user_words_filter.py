import re  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å —Å—Ç—Ä–æ—á–∫—É 12h
from aiogram import Bot, F, Dispatcher
from aiogram import Router
from aiogram.types import Message, ChatPermissions
from aiogram.filters import CommandStart, Command, CommandObject
from typing import Any
from aiogram.enums import ParseMode
from asyncpg.pgproto.pgproto import timedelta
from pydantic.v1.datetime_parse import parse_time
from contextlib import suppress  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ—à–∏–±–æ–∫
from aiogram.exceptions import TelegramBadRequest  # –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
from datetime import datetime, timedelta

from pyexpat.errors import messages
from pymorphy2 import MorphAnalyzer  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞.

user_words_filter_router = Router()

morph = MorphAnalyzer()
ban_words = [
    r'–∫–ª–æ—É–Ω\w*', r'–¥—É—Ä–∞[–∫—á]\w*', r'—á–º–æ\w*', r'–ª–æ[—Ö—à]\w*',
    r'–ø–∏–¥[—Äa]\w*', r'\w+[–µ*.]*[e–µ]+[d–¥]+'
]


@user_words_filter_router.message(F.text)
async def filter_band_words(message: Message, bot: Bot) -> Any:
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–º —é–∑–µ—Ä–æ–º. –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Ç–æ —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –Ω–µ–≥–æ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç
    chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if chat_member.status in ('administrator', 'creator'):
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    for word in message.text.lower().strip().split():
        parsed_word = morph.parse(word)[0]
        normal_form = parsed_word.normal_form

        for pattern in ban_words:
            if re.search(pattern, normal_form, re.IGNORECASE):
                return await message.answer('ü§¨ –Ω–µ —Ä—É–≥–∞–π—Å—è')

        for bad_word in ban_words:
            if bad_word in normal_form:
                return await message.answer('ü§¨ –Ω–µ —Ä—É–≥–∞–π—Å—è')

    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    for pattern in ban_words:
        if re.search(pattern, message.text, re.IGNORECASE):
            return await message.answer('–ù—É –Ω—É –Ω—É, –Ω–µ —Ä—É–≥–∞–π—Å—è')
